#
# Import this file from application.conf
#

spray.can {

  client {
    #
    # The default value of the `User-Agent` header to produce if no explicit `User-Agent`-header was included in a
    # request.
    # If this value is the empty string and no header was included in the request, no `User-Agent` header will be
    # rendered at all.
    #
    user-agent-header = spray-can/${spray.version}
    #
    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle timeouts.
    #
    idle-timeout = 10 s
    #
    # If a request hasn't been responded to after the time period set here the
    # connection will be closed and the application will receive a respective
    # `Closed` message.
    # Set to `infinite` to completely disable request timeouts.
    #
    request-timeout = 60 s
    #
    # the "granularity" of timeout checking for both idle connections timeouts
    # as well as request timeouts, should rarely be needed to modify.
    # If set to `infinite` request and connection timeout checking is disabled.
    #
    reaping-cycle = 1000 ms
    #
    # If this setting is non-zero the HTTP client connections automatically
    # aggregate incoming response chunks into full HttpResponses before
    # dispatching them to the application.
    # If the size of the aggregated response surpasses the specified limit the
    # HTTP client connection is closed and an error returned.
    # Set to zero to disable automatic request chunk aggregation and have
    # ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be
    # dispatched to the application.
    #
    response-chunk-aggregation-limit = 3 m
    #
    # Enables/disables an alternative request streaming mode that doesn't
    # use `Transfer-Encoding: chunked` but rather renders the individual
    # MessageChunks coming in from the application as parts of the original
    # request entity.
    # Enabling this mode causes all requests to require an explicit `Content-Length`
    # header for streaming requests.
    # Note that chunkless-streaming is implicitly enabled when streaming
    # HTTP/1.0 requests since they don't support `Transfer-Encoding: chunked`.
    #
    chunkless-streaming = off
    #
    # The initial size if the buffer to render the request headers in.
    # Can be used for fine-tuning request rendering performance but probably
    # doesn't have to be fiddled with in most applications.
    #
    request-header-size-hint = 512
    #
    # For HTTPS connections this setting specified the maximum number of
    # bytes that are encrypted in one go. Large requests are broken down in
    # chunks of this size so as to already begin sending before the request has
    # been encrypted entirely.
    #
    max-encryption-chunk-size = 1m
    #
    # The initial size if the buffer to render the request in.
    # Can be used for fine-tuning request rendering performance but probably
    # doesn't have to be fiddled with in most applications.
    #
    request-size-hint = 1024
    #
    # The time period within which the TCP connecting process must be completed.
    # Set to `infinite` to disable.
    #
    connecting-timeout = 30s
    #
    # Modify to tweak parsing settings on the client-side only.
    #
    parsing = ${spray.can.parsing}

    parsing {
      max-response-reason-length = 65536
    }
  }

  host-connector {
    #
    # The maximum number of parallel connections that an `HttpHostConnector`
    # is allowed to establish to a host. Must be greater than zero.
    #
    max-connections = 20
    #
    # The maximum number of times an `HttpHostConnector` attempts to repeat
    # failed requests (if the request can be safely retried) before
    # giving up and returning an error.
    #
    max-retries = 2
    #
    # If this setting is enabled, the `HttpHostConnector` pipelines requests
    # across connections, otherwise only one single request can be "open"
    # on a particular HTTP connection.
    #
    pipelining = off
    #
    # The time after which an idle `HttpHostConnector` (without open
    # connections) will automatically terminate itself.
    # Set to `infinite` to completely disable idle timeouts.
    #
    idle-timeout = 5 s
    #
    # Modify to tweak client settings for this host-connector only.
    #
    client = ${spray.can.client}
  }
}

spray.io {

  # the number of threads to spread connection management across
  # 1     = the root IOBridge manages all sockets itself (a good default for most applications)
  # n > 1 = the root IOBridge only handles ServerSockets for accepting new connections,
  #         mgmt. of the connection sockets themselves is spread equally across n sub-bridges
  parallelism = 1

  # the size of the buffer to allocate (anew!) for every read from a socket
  read-buffer-size = 4k

  tcp {
    # value for the SO_RCVBUF option for the created TCP sockets,
    # set to zero to not explicitly set a value but use the default
    receive-buffer-size = 0

    # value for the SO_SNDBUF option for the created TCP sockets,
    # set to zero to not explicitly set a value but use the default
    send-buffer-size = 0

    # indicates whether SO_KEEPALIVE should be set for the created TCP sockets,
    # 0 -> default, 1 -> true, -1 -> false
    keep-alive = 0

    # indicates whether TCP_NODELAY should be set for the created TCP sockets,
    # 0 -> default, 1 -> disable Nagle's algorithm, -1 -> enable Nagle's algorithm
    no-delay = 0
  }

  # the dispatcher for IOBridges, no flexibility here
  io-bridge-dispatcher = {
    type = "akka.spray.io.IOBridgeDispatcherConfigurator"
  }
}

sparql.client {

  type = "HttpSpray"

  endpoint = "http://localhost:5820/testDB"

  userId = "admin"

  password = "admin"
}
